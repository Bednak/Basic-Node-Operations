Exercises

1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

- sort: Takes all lines in the file and sorts each line alphabetically 

$ sort commands.js
           done(data);
           if (err) throw err;
       });
       break;
       break;
       commandLibrary.cat(userInputArray.slice(1));
       commandLibrary.echo(userInputArray.slice(1).join(" "));
       const fileName = fullPath[0];
       fs.readFile(fileName, (err, data) => {
     case "cat":
     case "echo":
     done(userInput);
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
   "cat": function(fullPath) {
   }
   }
   },
  "echo": function(userInput) {
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  switch (command) {

}
}
};
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;


- wc prints the newline, word and byte count for the file.

$ wc commands.js
 44  73 870 commands.js


- uniq: Sorts each line in the file put and return only lines that are different. If there is a line that is the same as the one above it, the command
removes it.

$ uniq commands.js
const fs = require("fs");

function done(output) {
    process.stdout.write(output);
    process.stdout.write('\nprompt > ');
}

function evaluateCmd(userInput) {

  const userInputArray = userInput.split(" ");
  const command = userInputArray[0];

  switch (command) {
     case "echo":

       commandLibrary.echo(userInputArray.slice(1).join(" "));
       break;

     case "cat":

       commandLibrary.cat(userInputArray.slice(1));
       break;
   }
}

const commandLibrary = {

  "echo": function(userInput) {
     done(userInput);
   },

   "cat": function(fullPath) {
       const fileName = fullPath[0];
       fs.readFile(fileName, (err, data) => {
           if (err) throw err;
           done(data);
       });
   }

};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;




2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

- The sort command sorted the command.js and the uniq command deleted any duplicate lines. It took out a lot of empty lines. 

$ sort commands.js | uniq
           done(data);
           done(newText);
           if (err) throw err;
           let converted = text.split('\n').slice(0,5).join('\n');
           let newText = Buffer.from(converted, 'utf8');
           let text = data.toString('utf8');
         done(newText);
         if (err) throw err;
         let converted = text.split('\n').slice(-5).join('\n');
         let newText = Buffer.from(converted, 'utf8');
         let text = data.toString('utf8');
       });
       break;
       commandLibrary.cat(userInputArray.slice(1));
       commandLibrary.echo(userInputArray.slice(1).join(" "));
       commandLibrary.head(userInputArray.slice(1));
       commandLibrary.tail(userInputArray.slice(1));
       const fileName = fullPath[0];
       fs.readFile(fileName, (err, data) => {
      commandLibrary.errorHandler();
      done('Invalid command');
     case "cat":
     case "echo":
     case "head":
     done(userInput);
    },
    case "tail":
    default:
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
   "cat": function(fullPath) {
   "errorHandler": function() {
   "head": function(fullPath) {
   "tail": function(fullPath) {
   }
   },
  "echo": function(userInput) {
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  switch (command) {

}
};
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
 




6.

function reverseString(inputString) {
  
  let stringArray = inputString.split(' ');
  let reverseStringArray = [];
  
  stringArray.forEach((currentItem) => {              
          
      let reversedWord = currentItem.split('')
      
      reversedWord.reverse();
      
      reversedWord = reversedWord.join('');
    
      reverseStringArray.push(reversedWord);
      
  })
  
     return reverseStringArray.join(' ');
  
}

console.log(reverseString("I'm learning to program algorithms!"));